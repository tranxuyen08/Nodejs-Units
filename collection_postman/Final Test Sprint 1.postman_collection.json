{
	"info": {
		"_postman_id": "1d1e22f3-bc95-4387-8012-bffabb31504e",
		"name": "Final Test Sprint 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Register",
			"item": [
				{
					"name": "Register fail by validate 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"\r",
									"pm.test(\"throw error Password need [#?!@$%^&*-]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"Wrong password format! Password must have at least 1 uppercase character, 1 special character, number.\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx99\",\r\n    \"password\":\"hoa12345@anager\",\r\n    \"employeeNumber\":1056\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register fail by validate 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"\r",
									"pm.test(\"throw error Password need [#?!@$%^&*-]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"Wrong password format! Password must have at least 1 uppercase character, 1 special character, number.\"\r",
									"    ])\r",
									"})\r",
									"\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx99\",\r\n    \"password\":\"hoa12345anager\",\r\n    \"employeeNumber\":1056\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register fail by validate 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"\r",
									"pm.test(\"throw error Password need [#?!@$%^&*-]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"Wrong password format! Password must have at least 1 uppercase character, 1 special character, number.\"\r",
									"    ])\r",
									"})\r",
									"\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx99\",\r\n    \"password\":\"hoa@Manager\",\r\n    \"employeeNumber\":1056\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Registration successfully\")\r",
									"})\r",
									"\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": true,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryObject = pm.request.body.raw;\r",
									"pm.test('Schema of each item add successfully', () => {\r",
									"    pm.expect(tv4.validate(entryObject, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"caotv99\",\r\n    \"password\":\"cao12345@Manager\",\r\n    \"employeeNumber\":1166\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Successfully by Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Registration successfully\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": true,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryObject = pm.request.body.raw;\r",
									"pm.test('Schema of each item add successfully', () => {\r",
									"    pm.expect(tv4.validate(entryObject, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv111\",\r\n    \"password\": \"hoa12345@Customer\",\r\n    \"customerNumber\": 112\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/customers/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"customers",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Successfully by Leader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Registration successfully\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": true,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryObject = pm.request.body.raw;\r",
									"pm.test('Schema of each item add successfully', () => {\r",
									"    pm.expect(tv4.validate(entryObject, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv11\",\r\n    \"password\": \"hoa12345@Leader\",\r\n    \"employeeNumber\": 1625\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Successfully by Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Registration successfully\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": true,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryObject = pm.request.body.raw;\r",
									"pm.test('Schema of each item add successfully', () => {\r",
									"    pm.expect(tv4.validate(entryObject, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv131\",\r\n    \"password\": \"hoa12345@Manager\",\r\n    \"employeeNumber\": 1702\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register fail by Username Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error Username is already exist!!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Username is already exist!\")\r",
									"})\r",
									"\r",
									"\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"caotv99\",\r\n    \"password\":\"hoa12345@Manager\",\r\n    \"employeeNumber\":1056\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register fail by EmployeeNumber Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"\r",
									"pm.test(\"throw error Username is already exist!!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"You cannot create more account\")\r",
									"})\r",
									"\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"username\",\r",
									"            \"password\",\r",
									"            \"employeeNumber\",\r",
									"           \r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"username\":{\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"password\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"employeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx9999\",\r\n    \"password\":\"hoa12345@Manager\",\r\n    \"employeeNumber\":1056\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Login",
			"item": [
				{
					"name": "Login fail by Username invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"\r",
									"pm.test(\"Login fail by Username is invalid\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Could not find username\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv11111\",\r\n    \"password\": \"hoa12345@Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/customers/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"customers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login fail by Password invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 500\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(500)\r",
									"})\r",
									"\r",
									"pm.test(\"Login fail by password is invalid\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Invalid username or password.\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv111\",\r\n    \"password\": \"hoa12345@Customerrrrr\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/customers/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"customers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successfully with Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv111\",\r\n    \"password\": \"hoa12345@Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/customers/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"customers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successfully with Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"username\":\"caotv99\",\r\n    \"password\":\"cao12345@Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successfully with Leader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv11\",\r\n    \"password\": \"hoa12345@Leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successfully with Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv131\",\r\n    \"password\": \"hoa12345@Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD for Customer & Employees ",
			"item": [
				{
					"name": "Login Successfully with President",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx1\",\r\n    \"password\":\"hoa12345@President\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all with Employee fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/customers?fields=customerNumber,phone,customerName,city",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers"
							],
							"query": [
								{
									"key": "fields",
									"value": "customerNumber,phone,customerName,city"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one with Employee fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/customers/102",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers",
								"102"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with employeeNumber is  invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Employee not found!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"employeeNumber is invalid\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/employees/10021",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees",
								"10021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all with Employee Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"const schema = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false\r",
									"  }\r",
									"}\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \r",
									"    },\r",
									"  }\r",
									"}\r",
									"const propertiesType = {\r",
									"           \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"    }\r",
									"const field = pm.request.url.query;\r",
									"const value = field.map((items)=>{\r",
									"       return items.value\r",
									"});\r",
									"pm.test(\"throw error :All employees\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"All employees\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/employees",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with employeeNumber valid Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\", () => {\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"const schemaItem = {\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false\r",
									"    }\r",
									"}\r",
									"\r",
									"const entryArray = pm.response.json().entries;\r",
									"\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/employees/1002",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees",
								"1002"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Employee fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"Gsssss\",\r\n    \"extension\":\"dsjf\",\r\n    \"email\":\"okca@penkais.com\",\r\n    \"officeCode\":\"7\",\r\n    \"jobTitle\":\"Staff\",\r\n    \"reportsTo\":1088\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/employees",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Employee faile by is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", () => {\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error : Validation failed\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"customerName\\\" is required\",\r",
									"        \"\\\"contactLastName\\\" is required\",\r",
									"        \"\\\"contactFirstName\\\" is required\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"customerName\",\r",
									"            \"contactLastName\",\r",
									"            \"contactFirstName\",\r",
									"            \"phone\",\r",
									"            \"addressLine1\",\r",
									"            \"addressLine2\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"postalCode\",\r",
									"            \"country\",\r",
									"            \"salesRepEmployeeNumber\",\r",
									"            \"creditLimit\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"customerName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"contactLastName\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"contactFirstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"addressLine1\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"addressLine2\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"city\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"state\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"postalCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"country\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"salesRepEmployeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"creditLimit\": {\r",
									"                \"type\": \"number\"\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"    }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\":\"023265659\", \r\n    \"addressLine1\":\"Co Nhue 1\", \r\n    \"addressLine2\":\"hahaha\",\r\n    \"city\":\"Ha Noi\", \r\n    \"state\":\"Nam Tu Liem\", \r\n    \"postalCode\":\"10000\", \r\n    \"country\":\"Viet Nam\", \r\n    \"salesRepEmployeeNumber\":1612, \r\n    \"creditLimit\":111\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Employee fail by Email dupplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"employeeNumber\", pm.response.json().employeeNumber);\r",
									"\r",
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Email cannot be dupplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Email cannot be dupplicate\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"employeeNumber\":{\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"firstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"extension\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"officeCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"reportsTo\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"jobTitle\":{\r",
									"                \"type\" : \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"Gsssss\",\r\n    \"extension\":\"dsjf\",\r\n    \"email\":\"okca@penkais.com\",\r\n    \"officeCode\":\"7\",\r\n    \"jobTitle\":\"Staff\",\r\n    \"reportsTo\":1088\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/employees",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create customer by employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"customerNumber\", pm.response.json().customerNumber);\r",
									"\r",
									"\r",
									"pm.test(\"stattus code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"customerName\",\r",
									"            \"contactLastName\",\r",
									"            \"contactFirstName\",\r",
									"            \"phone\",\r",
									"            \"addressLine1\",\r",
									"            \"addressLine2\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"postalCode\",\r",
									"            \"country\",\r",
									"            \"salesRepEmployeeNumber\",\r",
									"            \"creditLimit\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"customerName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"contactLastName\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"contactFirstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"phone\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"addressLine1\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"addressLine2\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"city\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"state\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"postalCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"country\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"salesRepEmployeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"creditLimit\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"console.log(entryArray)\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\":\"Jimbul\", \r\n    \"contactLastName\":\"Kangche\", \r\n    \"contactFirstName\":\"KangMi\", \r\n    \"phone\":\"023265659\", \r\n    \"addressLine1\":\"Co Nhue 1\", \r\n    \"addressLine2\":\"hahaha\",\r\n    \"city\":\"Ha Noi\", \r\n    \"state\":\"Nam Tu Liem\", \r\n    \"postalCode\":\"10000\", \r\n    \"country\":\"Viet Nam\", \r\n    \"salesRepEmployeeNumber\":1612,\r\n    \"creditLimit\":111\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Employee fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\":\"Nishi\",\r\n    \"firstName\":\"Mami\",\r\n    \"extension\":\"x456\",\r\n    \"email\":\"harry@gmail.com\",\r\n    \"officeCode\":\"6\",\r\n    \"reportsTo\":1088,\r\n    \"jobTitle\":\"Staff\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/employees/{{employeeNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees",
								"{{employeeNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Employee fail by Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Validation failed!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect( [\r",
									"        \"customerNumber must be a positive number\"\r",
									"    ])\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\":\"{{$randomFullName}}\", \r\n    \"contactLastName\":\"Kim\", \r\n    \"contactFirstName\":\"Kass\", \r\n    \"phone\":\"023563442\", \r\n    \"addressLine1\":\"Co Nhue 1\", \r\n    \"addressLine2\":\"hahaha\",\r\n    \"city\":\"Ha Noi\", \r\n    \"state\":\"Nam Tu Liem\", \r\n    \"postalCode\":\"10000\", \r\n    \"country\":\"Viet Nam\", \r\n    \"salesRepEmployeeNumber\":7000, \r\n    \"creditLimit\": \"1212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/customers/{{customerNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers",
								"{{customerNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Employee fail by EmployeeNumber is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 500\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :employeeNumber is invalid\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"employeeNumber is invalid\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\":\"King\",\r\n    \"firstName\":\"Tom\",\r\n    \"extension\":\"x456\",\r\n    \"email\":\"harry@gmail.com\",\r\n    \"officeCode\":\"6\",\r\n    \"reportsTo\":1088,\r\n    \"jobTitle\":\"Staff\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/employees/19987",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees",
								"19987"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Employee Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Update Successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Update information successfully\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"      \"customerNumber\",\r",
									"            \"customerName\",\r",
									"            \"contactLastName\",\r",
									"            \"contactFirstName\",\r",
									"            \"phone\",\r",
									"            \"addressLine1\",\r",
									"            \"addressLine2\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"postalCode\",\r",
									"            \"country\",\r",
									"            \"salesRepEmployeeNumber\",\r",
									"            \"creditLimit\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"customerName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"contactLastName\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"contactFirstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"phone\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"addressLine1\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"addressLine2\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"city\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"state\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"postalCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"country\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"salesRepEmployeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"creditLimit\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\":\"{{$randomFileName}}\", \r\n    \"contactLastName\":\"Kim\", \r\n    \"contactFirstName\":\"Kasss\", \r\n    \"phone\":\"0235624234\", \r\n    \"addressLine1\":\"Co Nhue 1\", \r\n    \"addressLine2\":\"hahaha\",\r\n    \"city\":\"Ha Noi\", \r\n    \"state\":\"Nam Tu Liem\", \r\n    \"postalCode\":\"10000\", \r\n    \"country\":\"Viet Nam\", \r\n    \"salesRepEmployeeNumber\":1621, \r\n    \"creditLimit\":243\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/customers/{{customerNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers",
								"{{customerNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete with Employee fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/employees/{{employeeNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees",
								"{{employeeNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete with CustomerNumber is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Customer not found!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"customerNumber is invalid\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/customers/2101",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers",
								"2101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete with Employee fail by check advance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\", () => {\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Employee not found!\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"employeeNumber is invalid or Cannot delete this employee\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/employees/advance/1001",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"employees",
								"advance",
								"1001"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by Employee successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Delete  :Customer  successfully!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Delete successfully!\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/customers/{{customerNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"customers",
								"{{customerNumber}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Management",
			"item": [
				{
					"name": "Login Successfully with President",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx1\",\r\n    \"password\":\"hoa12345@President\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Product fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Product fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/products/123",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with ProductID is  invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :Employee not found!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"productCode is invalid!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/products/10021",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"10021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all with Products Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"const schema = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false\r",
									"  }\r",
									"}\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \r",
									"    },\r",
									"  }\r",
									"}\r",
									"// const propertiesType = {\r",
									"//            \"employeeNumber\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"lastName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"firstName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"extension\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"email\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"officeCode\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"reportsTo\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"jobTitle\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             }\r",
									"//     }\r",
									"// const field = pm.request.url.query;\r",
									"// const value = field.map((items)=>{\r",
									"//        return items.value\r",
									"// });\r",
									"// pm.test(\"throw error :All employees\",()=>{\r",
									"//     const response = pm.response.json();\r",
									"//     pm.expect(response.message).to.equal(\"true\")\r",
									"// })\r",
									"\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(true).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with ProductCode Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\", () => {\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/products/S10_1949",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_1949"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Product fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_1949\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Classic Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"created_on\": \"2021-12-04T09:55:09.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Product faile by is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", () => {\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error : Validation failed\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect( [\r",
									"        \"\\\"created_on\\\" must be a valid date\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"productCode\",\r",
									"            \"productName\",\r",
									"            \"productLine\",\r",
									"            \"productScale\",\r",
									"            \"productVendor\",\r",
									"            \"productDescription\",\r",
									"            \"quantityInStock\",\r",
									"            \"buyPrice\",\r",
									"            \"MSRP\",\r",
									"            \"created_by\",\r",
									"            \"updated_by\",\r",
									"            \"created_on\",\r",
									"            \"updated_on\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"productCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productName\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"productLine\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productScale\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"productVendor\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productDescription\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"quantityInStock\": {\r",
									"                \"type\": \"smallint\"\r",
									"            },\r",
									"            \"buyPrice\": {\r",
									"                \"type\": \"decimal\"\r",
									"            },\r",
									"            \"MSRP\": {\r",
									"                \"type\": \"decimal\"\r",
									"            },\r",
									"            \"created_by\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"updated_by\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"created_on\": {\r",
									"                \"type\": \"date\"\r",
									"            },\r",
									"            \"updated_on\": {\r",
									"                \"type\": \"date\"\r",
									"            },\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"    }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_1949\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Classic Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"created_on\": \"2021-12-04T09:55:09.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fail by ProductCode dupplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"employeeNumber\", pm.response.json().employeeNumber);\r",
									"\r",
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"created_on\\\" must be a valid date\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"employeeNumber\":{\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"firstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"extension\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"officeCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"reportsTo\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"jobTitle\":{\r",
									"                \"type\" : \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_1949\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Classic Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"created_on\": \"2021-12-04T09:55:09.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fail by ProductLine is valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"employeeNumber\", pm.response.json().employeeNumber);\r",
									"\r",
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"error\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"employeeNumber\":{\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"firstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"extension\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"officeCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"reportsTo\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"jobTitle\":{\r",
									"                \"type\" : \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_1949\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Classic Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"created_on\": \"2021-12-04T09:55:09.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Product  Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"customerNumber\", pm.response.json().customerNumber);\r",
									"\r",
									"\r",
									"pm.test(\"stattus code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"customerName\",\r",
									"            \"contactLastName\",\r",
									"            \"contactFirstName\",\r",
									"            \"phone\",\r",
									"            \"addressLine1\",\r",
									"            \"addressLine2\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"postalCode\",\r",
									"            \"country\",\r",
									"            \"salesRepEmployeeNumber\",\r",
									"            \"creditLimit\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"customerName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"contactLastName\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"contactFirstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"phone\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"addressLine1\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"addressLine2\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"city\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"state\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"postalCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"country\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"salesRepEmployeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"creditLimit\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"console.log(entryArray)\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product fail by Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"error\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product fail by ProductCode is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :productCode is invalid!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"productCode is invalid!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"pm.test(\"Update Successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Update successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Product fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Product fail by ProductCode is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :Validation failed!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"productCode is invalid!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Product Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"pm.test(\"Delete successfully!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Delete successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/products/S10_2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"products",
								"S10_2000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProductLine Management",
			"item": [
				{
					"name": "Login Successfully with President",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx1\",\r\n    \"password\":\"hoa12345@President\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Product fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all with Products Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"const schema = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false\r",
									"  }\r",
									"}\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \r",
									"    },\r",
									"  }\r",
									"}\r",
									"// const propertiesType = {\r",
									"//            \"employeeNumber\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"lastName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"firstName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"extension\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"email\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"officeCode\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"reportsTo\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"jobTitle\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             }\r",
									"//     }\r",
									"// const field = pm.request.url.query;\r",
									"// const value = field.map((items)=>{\r",
									"//        return items.value\r",
									"// });\r",
									"// pm.test(\"throw error :All employees\",()=>{\r",
									"//     const response = pm.response.json();\r",
									"//     pm.expect(response.message).to.equal(\"true\")\r",
									"// })\r",
									"\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(true).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Product fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/product-lines/123",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with ProductID is  invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :Employee not found!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"productLine is invalid!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/product-lines/10021",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"10021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with ProductLine Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\", () => {\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Cars",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Product fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_1949\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Classic Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"created_on\": \"2021-12-04T09:55:09.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Product faile by is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", () => {\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error : Validation failed\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"created_on\\\" must be a valid date\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"productCode\",\r",
									"            \"productName\",\r",
									"            \"productLine\",\r",
									"            \"productScale\",\r",
									"            \"productVendor\",\r",
									"            \"productDescription\",\r",
									"            \"quantityInStock\",\r",
									"            \"buyPrice\",\r",
									"            \"MSRP\",\r",
									"            \"created_by\",\r",
									"            \"updated_by\",\r",
									"            \"created_on\",\r",
									"            \"updated_on\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"productCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productName\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"productLine\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productScale\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"productVendor\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productDescription\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"quantityInStock\": {\r",
									"                \"type\": \"smallint\"\r",
									"            },\r",
									"            \"buyPrice\": {\r",
									"                \"type\": \"decimal\"\r",
									"            },\r",
									"            \"MSRP\": {\r",
									"                \"type\": \"decimal\"\r",
									"            },\r",
									"            \"created_by\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"updated_by\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"created_on\": {\r",
									"                \"type\": \"date\"\r",
									"            },\r",
									"            \"updated_on\": {\r",
									"                \"type\": \"date\"\r",
									"            },\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"    }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"Classic Cars\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null,\r\n    \"updated_by\": null,\r\n    \"created_by\": 1002,\r\n    \"created_on\": \"2021-12-04T09:54:14.000Z\",\r\n    \"updated_on\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fail by ProductLine dupplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"employeeNumber\", pm.response.json().employeeNumber);\r",
									"\r",
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"created_on\\\" must be a valid date\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"employeeNumber\":{\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"firstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"extension\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"officeCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"reportsTo\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"jobTitle\":{\r",
									"                \"type\" : \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n           \"productLine\": \"Classic Cars\",\r\n        \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n        \"htmlDescription\": null,\r\n        \"image\": null,\r\n        \"updated_by\": null,\r\n        \"created_by\": 1002,\r\n        \"created_on\": \"2021-12-04T09:54:14.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fail by ProductLine is valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"employeeNumber\", pm.response.json().employeeNumber);\r",
									"\r",
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductLine is Validation\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"productLine\\\" is not allowed to be empty\",\r",
									"        \"\\\"created_on\\\" must be a valid date\"\r",
									"    ])\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"employeeNumber\":{\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"firstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"extension\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"officeCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"reportsTo\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"jobTitle\":{\r",
									"                \"type\" : \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null,\r\n    \"updated_by\": null,\r\n    \"created_by\": 1002,\r\n    \"created_on\": \"2021-12-04T09:54:14.000Z\",\r\n    \"updated_on\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Product  Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"customerNumber\", pm.response.json().customerNumber);\r",
									"\r",
									"\r",
									"pm.test(\"stattus code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"customerName\",\r",
									"            \"contactLastName\",\r",
									"            \"contactFirstName\",\r",
									"            \"phone\",\r",
									"            \"addressLine1\",\r",
									"            \"addressLine2\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"postalCode\",\r",
									"            \"country\",\r",
									"            \"salesRepEmployeeNumber\",\r",
									"            \"creditLimit\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"customerName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"contactLastName\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"contactFirstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"phone\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"addressLine1\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"addressLine2\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"city\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"state\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"postalCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"country\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"salesRepEmployeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"creditLimit\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"console.log(entryArray)\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"Classic Lambogini\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"Classic Lambogini\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lambogini",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lambogini"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product fail by Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Validation failed!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"productLine\\\" is not allowed to be empty\"\r",
									"    ])\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lambogini",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lambogini"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product fail by ProductCode is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :productCode is invalid!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"productLine is invalid!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"Classic Lambogini\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lamboginiiii",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lamboginiiii"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Update Successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Update successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productLine\": \"Classic Lambogini\",\r\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lambogini",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lambogini"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Product fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lambogini",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lambogini"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Product fail by ProductCode is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :Validation failed!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"productLine is invalid!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lamboginiiii",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lamboginiiii"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Product Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Delete successfully!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Delete successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/product-lines/Classic Lambogini",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"product-lines",
								"Classic Lambogini"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders Management",
			"item": [
				{
					"name": "Login Successfully with President",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx1\",\r\n    \"password\":\"hoa12345@President\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Orders fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Orders  fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/orders/123",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with OrdersID is  invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :Employee not found!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"orderNumber is invalid!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/orders/10021",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"10021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all with Orders Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(true).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with OrdersID Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\", () => {\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/orders/10101",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"10101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Orders fail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"COD\",\r\n    \"orderDate\":\"2003-05-27\",\r\n    \"requiredDate\": \"2003-05-27\",\r\n    \"shippedDate\": \"2003-05-20\",\r\n    \"comments\": null,\r\n    \"customerNumber\": 103,\r\n    \"orderdetails\": [\r\n        {\r\n            \"productCode\":\"S18_1749\",\r\n            \"quantityOrdered\": 1000,\r\n            \"orderLineNumber\": 1\r\n        },\r\n        {\r\n            \"productCode\":\"S18_2248\",\r\n            \"quantityOrdered\": 160,\r\n            \"orderLineNumber\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Orders faile by is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", () => {\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect([\r",
									"        \"\\\"created_on\\\" must be a valid date\"\r",
									"    ])\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"IN process\",\r\n    \"orderDate\":\"2003-05-27\",\r\n    \"requiredDate\": \"2003-05-27\",\r\n    \"shippedDate\": \"2003-05-20\",\r\n    \"comments\": null,\r\n    \"customerNumber\": 103,\r\n    \"orderdetails\": [\r\n        {\r\n            \"productCode\":\"S18_1749\",\r\n            \"quantityOrdered\": 1000,\r\n            \"orderLineNumber\": 1\r\n        },\r\n        {\r\n            \"productCode\":\"S18_2248\",\r\n            \"quantityOrdered\": 160,\r\n            \"orderLineNumber\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Orders   Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orderNumber\", pm.response.json().order.orderNumber);\r",
									"\r",
									"pm.test(\"stattus code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"In Process\",\r\n    \"orderDate\":\"2003-05-27\",\r\n    \"requiredDate\": \"2003-05-27\",\r\n    \"shippedDate\": \"2003-05-20\",\r\n    \"comments\": null,\r\n    \"customerNumber\": 103,\r\n    \"orderdetails\": [\r\n        {\r\n            \"productCode\":\"S18_1749\",\r\n            \"quantityOrdered\": 10,\r\n            \"orderLineNumber\": 1\r\n        },\r\n        {\r\n            \"productCode\":\"S18_2248\",\r\n            \"quantityOrdered\": 12,\r\n            \"orderLineNumber\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/{{orderNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders  fail by Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"error\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"In Process\",\r\n    \"orderDate\":\"2003-05-27\",\r\n    \"requiredDate\": \"2003-05-27\",\r\n    \"shippedDate\": \"2003-05-20\",\r\n    \"comments\": null,\r\n    \"customerNumber\": 103,\r\n    \"orderdetails\": [\r\n        {\r\n            \"productCode\":\"S18_1749\",\r\n            \"quantityOrdered\": 12,\r\n            \"priceEach\": 7000,\r\n            \"orderLineNumber\": 1\r\n        },\r\n        {\r\n            \"productCode\":\"S18_2248\",\r\n            \"quantityOrdered\": 12,\r\n            \"priceEach\": 6000,\r\n            \"orderLineNumber\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/10427",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"10427"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders fail by OrderID is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :productCode is invalid!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"orderNumber is invalid!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Resolved\",\r\n    \"comments\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/1042777777",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"1042777777"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Update Successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Update status order successfully\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Shipped\",\r\n    \"comments\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/10101",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"10101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Orders fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/{{orderNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Orders fail by ProductCode is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(404)\r",
									"})\r",
									"pm.test(\"throw error :Validation failed!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"orderNumber is invalid!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/S10_2000000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"S10_2000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Orders Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Delete successfully!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Deleted order successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/orders/{{orderNumber}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderNumber}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Offices Management",
			"item": [
				{
					"name": "Login Successfully with President",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx1\",\r\n    \"password\":\"hoa12345@President\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Offices fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Officesfail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices/123",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with OfficesCode is  invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :OfficeCode not found!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"OfficeCode is invalid\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices/10000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"10000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all with Offices Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"const schema = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false\r",
									"  }\r",
									"}\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \r",
									"    },\r",
									"  }\r",
									"}\r",
									"// const propertiesType = {\r",
									"//            \"employeeNumber\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"lastName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"firstName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"extension\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"email\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"officeCode\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"reportsTo\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"jobTitle\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             }\r",
									"//     }\r",
									"// const field = pm.request.url.query;\r",
									"// const value = field.map((items)=>{\r",
									"//        return items.value\r",
									"// });\r",
									"// pm.test(\"throw error :All employees\",()=>{\r",
									"//     const response = pm.response.json();\r",
									"//     pm.expect(response.message).to.equal(\"true\")\r",
									"// })\r",
									"\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(true).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get only with OfficesCode Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\", () => {\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices/7",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Officesfail by Unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_1949\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Classic Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"created_on\": \"2021-12-04T09:55:09.000Z\",\r\n        \"updated_on\": null\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Offices faile by is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", () => {\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"error\")\r",
									"})\r",
									"const schemaItem = {\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"productCode\",\r",
									"            \"productName\",\r",
									"            \"productLine\",\r",
									"            \"productScale\",\r",
									"            \"productVendor\",\r",
									"            \"productDescription\",\r",
									"            \"quantityInStock\",\r",
									"            \"buyPrice\",\r",
									"            \"MSRP\",\r",
									"            \"created_by\",\r",
									"            \"updated_by\",\r",
									"            \"created_on\",\r",
									"            \"updated_on\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"productCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productName\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"productLine\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productScale\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"productVendor\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"productDescription\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"quantityInStock\": {\r",
									"                \"type\": \"smallint\"\r",
									"            },\r",
									"            \"buyPrice\": {\r",
									"                \"type\": \"decimal\"\r",
									"            },\r",
									"            \"MSRP\": {\r",
									"                \"type\": \"decimal\"\r",
									"            },\r",
									"            \"created_by\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"updated_by\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"created_on\": {\r",
									"                \"type\": \"date\"\r",
									"            },\r",
									"            \"updated_on\": {\r",
									"                \"type\": \"date\"\r",
									"            },\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"    }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"orderNumber\": 10100,\r\n        \"orderDate\": \"2003-05-18T17:00:00.000Z\",\r\n        \"requiredDate\": \"2003-05-27T17:00:00.000Z\",\r\n        \"shippedDate\": \"2003-05-20T17:00:00.000Z\",\r\n        \"status\": \"Shipped\",\r\n        \"comments\": null,\r\n        \"customerNumber\": 103,\r\n        \"created_on\": \"2021-12-04T09:56:04.000Z\",\r\n        \"updated_on\": null,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"deleted\": 0\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fail by OfficeCode dupplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"employeeNumber\", pm.response.json().employeeNumber);\r",
									"\r",
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"error\")\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"           \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"           \"employeeNumber\":{\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"firstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"extension\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"email\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"officeCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"reportsTo\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"jobTitle\":{\r",
									"                \"type\" : \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"orderNumber\": 10100,\r\n        \"orderDate\": \"2003-05-18T17:00:00.000Z\",\r\n        \"requiredDate\": \"2003-05-27T17:00:00.000Z\",\r\n        \"shippedDate\": \"2003-05-20T17:00:00.000Z\",\r\n        \"status\": \"Shipped\",\r\n        \"comments\": null,\r\n        \"customerNumber\": 103,\r\n        \"created_on\": \"2021-12-04T09:56:04.000Z\",\r\n        \"updated_on\": null,\r\n        \"created_by\": 1056,\r\n        \"updated_by\": null,\r\n        \"deleted\": 0\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with Offices Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"stattus code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"customerName\",\r",
									"            \"contactLastName\",\r",
									"            \"contactFirstName\",\r",
									"            \"phone\",\r",
									"            \"addressLine1\",\r",
									"            \"addressLine2\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"postalCode\",\r",
									"            \"country\",\r",
									"            \"salesRepEmployeeNumber\",\r",
									"            \"creditLimit\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"customerName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"contactLastName\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"contactFirstName\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"phone\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"addressLine1\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"addressLine2\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"city\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"state\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"postalCode\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"country\":{\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"salesRepEmployeeNumber\":{\r",
									"                \"type\" : \"number\"\r",
									"            },\r",
									"            \"creditLimit\":{\r",
									"                \"type\" : \"number\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"  }\r",
									"}\r",
									"\r",
									"const entryArray = pm.request.body.raw;\r",
									"console.log(entryArray)\r",
									"pm.test('Schema of each item must be valid', () => {\r",
									"    pm.expect(tv4.validate(entryArray, schemaItem)).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"        "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"officeCode\": \"11\",\r\n        \"city\": \"Ha Noi\",\r\n        \"phone\": \"123456789\",\r\n        \"addressLine1\": \"Quang Tri\",\r\n        \"addressLine2\": \"Tri Quang 1\",\r\n        \"state\": \"Nam Tu Liem\",\r\n        \"country\": \"Viet Nam\",\r\n        \"postalCode\": \"ANUGESD\",\r\n        \"territory\": \"Lukaku\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offices fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/10427",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"10427"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offices fail by Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :ProductCode Duplicate\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.status).to.equal(\"error\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"In Process\",\r\n    \"orderDate\":\"2003-05-27\",\r\n    \"requiredDate\": \"2003-05-27\",\r\n    \"shippedDate\": \"2003-05-20\",\r\n    \"comments\": null,\r\n    \"customerNumber\": 103,\r\n    \"orderdetails\": [\r\n        {\r\n            \"productCode\":\"S18_1749\",\r\n            \"quantityOrdered\": 12,\r\n            \"priceEach\": 7000,\r\n            \"orderLineNumber\": 1\r\n        },\r\n        {\r\n            \"productCode\":\"S18_2248\",\r\n            \"quantityOrdered\": 12,\r\n            \"priceEach\": 6000,\r\n            \"orderLineNumber\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/10427",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"10427"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offices fail by OrderID is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :productCode is invalid!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"OfficeCode is invalid\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"officeCode\": \"10\",\r\n        \"city\": \"Ha Noi\",\r\n        \"phone\": \"123456789\",\r\n        \"addressLine1\": \"Quang Tri\",\r\n        \"addressLine2\": \"Tri Quang 1\",\r\n        \"state\": \"Nam Tu Liem\",\r\n        \"country\": \"Viet Nam\",\r\n        \"postalCode\": \"ANUGESD\",\r\n        \"territory\": \"Lukaku\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/1042",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"1042"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offices Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.test(\"Update Successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Update successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"officeCode\": \"11\",\r\n    \"city\": \"Ha Noi\",\r\n    \"phone\": \"123456789\",\r\n    \"addressLine1\": \"Quang Tri\",\r\n    \"addressLine2\": \"Tri Quang 1\",\r\n    \"state\": \"Nam Tu Liem\",\r\n    \"country\": \"Viet Nam\",\r\n    \"postalCode\": \"ANUGESD\",\r\n    \"territory\": \"Lukaku\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/11",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Offices fail by Unauthoeize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"Vintage Cars\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/S10_2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"S10_2000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Offices fail by OfficeCode is invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(400)\r",
									"})\r",
									"pm.test(\"throw error :Validation failed!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"OfficeCode is invalid\")\r",
									"})\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"productCode\": \"S10_2000\",\r\n        \"productName\": \"1952 Alpine Renault 1300\",\r\n        \"productLine\": \"\",\r\n        \"productScale\": \"1:10\",\r\n        \"productVendor\": \"Classic Metal Creations\",\r\n        \"productDescription\": \"Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.\",\r\n        \"quantityInStock\": 7305,\r\n        \"buyPrice\": 98.58,\r\n        \"MSRP\": 214.3\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/S10_2000000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"S10_2000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Offices Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(201)\r",
									"})\r",
									"pm.test(\"Delete successfully!\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Delete successfully!\")\r",
									"})\r",
									"\r",
									"pm.test(\"is successfully\", function () {\r",
									"    pm.expect(true).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/offices/11",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices",
								"11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Report Management",
			"item": [
				{
					"name": "Get all Report fail by unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successfully with President",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"hoamx1\",\r\n    \"password\":\"hoa12345@President\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/employees/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"employees",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Report Successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stattus code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    console.log(response)\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"const schema = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"            \"employeeNumber\",\r",
									"            \"lastName\",\r",
									"            \"firstName\",\r",
									"            \"extension\",\r",
									"            \"email\",\r",
									"            \"officeCode\",\r",
									"            \"reportsTo\",\r",
									"            \"jobTitle\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \"employeeNumber\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"firstName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"extension\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"officeCode\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"reportsTo\": {\r",
									"                \"type\": \"number\"\r",
									"            },\r",
									"            \"jobTitle\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"    },\r",
									"    \"additionalProperties\": false\r",
									"  }\r",
									"}\r",
									"const schemaItem = {\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"    ],\r",
									"    \"properties\": {\r",
									"            \r",
									"    },\r",
									"  }\r",
									"}\r",
									"// const propertiesType = {\r",
									"//            \"employeeNumber\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"lastName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"firstName\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"extension\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"email\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"officeCode\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             },\r",
									"//             \"reportsTo\": {\r",
									"//                 \"type\": \"number\"\r",
									"//             },\r",
									"//             \"jobTitle\": {\r",
									"//                 \"type\": \"string\"\r",
									"//             }\r",
									"//     }\r",
									"// const field = pm.request.url.query;\r",
									"// const value = field.map((items)=>{\r",
									"//        return items.value\r",
									"// });\r",
									"// pm.test(\"throw error :All employees\",()=>{\r",
									"//     const response = pm.response.json();\r",
									"//     pm.expect(response.message).to.equal(\"true\")\r",
									"// })\r",
									"\r",
									"\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(true).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/reports",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Successfully with Customer Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(200)\r",
									"})\r",
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"pm.test(\"Registration successfully\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Login successfully\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"caotv111\",\r\n    \"password\": \"hoa12345@Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users/customers/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"customers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Report fail with Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\",()=>{\r",
									"    const response = pm.response;\r",
									"    pm.expect(response.code).to.equal(401)\r",
									"})\r",
									"pm.test(\"throw error Unauthorize]\",()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unauthorize!\")\r",
									"})\r",
									"pm.test(\"is failing\", function () {\r",
									"    pm.expect(false).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"offices"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}